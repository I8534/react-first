// spread에 대해
let person = {
  name : 'jung',
  age : 20
}

// person이라는 객체를 그대로 복사
// ... 사용시 객체의 깊은 복사가 일어나게 된다. 딥카피
// 딥카피시 기존 객체가 그대로 복사되어서 새로운 객체가 생성된다. 
// 복사했기 때문에 지금은 내용은 완전 똑같지만 완전히 다른 객체 두개가 생긴 것이다.

let person2 = {...person};

// ... ㅇ벗이 얕은 복사 일명 셀로우 카피
let person3 = person;
console.log(person3);
// 콘솔창에서는 똑같이 보이겠지만, ... 없이 값을 바로 할당할 경우 새로운 객체를 형성하는 것이 아니라 기존 객체의 주소값만 복사해오는 것이다.
// 즉 기존 객체를 참조할 뿐이다. 객체는 하나이고 그 객체를 참조하는 변수가 2개인 것이다.
// person3는 기존 객체를 참조할 뿐 새로운 객체가 만들어진 것이 아니다. 
console.log(person == person2); // false
console.log(person == person3); // true 나온다. 왜냐하면 객체를 가리키고 있는 화살표가 동일하기 때문이다.

// array 배열
let a = [1,2,3]
let b = [...a,4]

// a와 b의 값을 둘 다 딥카피 한 새로운 객체가 만들어진 것이다.
// 앞의...rest와 혼동될 수 있는데 아까 그건 변수명이다.
let c = [...a,...b]